package s2sCompiler

import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.{CompilationUnit, Node}
import com.github.javaparser.ast.`type`.Type
import com.github.javaparser.ast.expr.{Expression, NameExpr}
import com.github.javaparser.ast.stmt.LabeledStmt
import s2sCompiler.ErrorReporter.ErrorLevel

import scala.collection.mutable

/**
 * Builds a map from expressions to their types
 * Relies on JavaSymbolSolver, which sometimes fails. It should therefore never be assumed that all types will be 
 * present in the map
 */
final class Analyzer extends CompilerStage[CompilationUnit, (CompilationUnit, Map[Expression, Type])] {

  override protected def runImpl(cu: CompilationUnit, errorReporter: ErrorReporter): Option[(CompilationUnit, Map[Expression, Type])] = {
    val filename = cu.getStorage.map(_.getFileName).orElseGet { () => "<missing file name>" }
    val mapB = Map.newBuilder[Expression, Type]
    cu.findAll(classOf[Node]).forEach { node =>
      checkDollarInNames(errorReporter, filename, node)
      computeAndAddTypeIfExpr(mapB, node)
    }
    Some(cu, mapB.result())
  }

  private def computeAndAddTypeIfExpr(mapB: mutable.Builder[(Expression, Type), Map[Expression, Type]], node: Node): Unit = {
    node match {
      case expr: Expression => {
        try {
          val resolvedType = expr.calculateResolvedType()
          val tpe = StaticJavaParser.parseType(resolvedType.describe())
          mapB.addOne(expr -> tpe)
        } catch {
          case _: Exception => ()
        }
      }
      case _ => ()
    }
  }

  private def checkDollarInNames(errorReporter: ErrorReporter, filename: String, node: Node): Unit = {
    node match {
      case nameExpr: NameExpr if nameExpr.getName.getIdentifier.contains('$') =>
        errorReporter.reportErrorPos(
          "'$' in identifier: if possible, change the identifier, otherwise make sure that it will not conflict with the " +
            "identifiers generated by the instrumentation",
          ErrorLevel.CriticalWarning,
          filename,
          nameExpr.getRange
        )
      case labeledStmt: LabeledStmt if labeledStmt.getLabel.getIdentifier.contains('$') =>
        errorReporter.reportErrorPos(
          "'$' in label: if possible, change the label, otherwise make sure that it will not conflict with the " +
            "labels generated by the instrumentation",
          ErrorLevel.CriticalWarning,
          filename,
          labeledStmt.getRange
        )
      case _ => ()
    }
  }
}
